%%
%% Simply typed lambda calculus
%%


type(C,var(X),       T) :- first(pair(X,T),C).
type(C,lam(X,E),arr(A, B)) :- type(cons(pair(X,A),C), E,  B).
type(C,app(X,Y),        B) :- type(C,X,arr(A,B)), type(C,Y,A).


first(pair(K,V),cons(pair(K1,V1),Xs)) :- eq(K,K1), eq(V, V1). 
first(pair(K,V),cons(pair(K1,V1),Xs)) :- first(pair(K,V), Xs).

eq(X,X).

ctx0(
 cons(pair(f,arr(a,b)),
 cons(pair(x,a)
     ,nil) )
    ).

%%%% finds starnge things
% res :- ctx0(C), type(C,var(x),T).

%%%% this works fine
% res :- type(cons(pair(f,arr(a,b)),cons(pair(x,a),nil)), var(x), T).

%%
%% Type checking:
%%
%% res :- type(nil, lam(x,var(x)), arr(A, A)).
%%
%% > True
%% >        observed inductively: res :- type(nil, lam(x, var(x)), arr(V_5, V_5)).
%%
%% Type inference:
%%
%% res :- type(nil, lam(f,lam(x,app(var(f) , var(x)))), T).
%% 
%% > True
%% >       observed inductively: res :- type(nil, lam(f, lam(x, app(var(f), var(x)))),
%% >         arr(arr(V_815, V_75), arr(V_815, V_75))).
	

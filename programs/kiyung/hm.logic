%%
%% no let polymorphism
%%

type( C, var(X),         T)         :- first(pair(X,T),C). 
type( C, lam(X, E),      arr(A,B))  :- type(cons(pair(X,A),C),E,B).
type( C, app(X, Y),      B)         :- type(C,X,arr(A, B)), type(C,Y,A).
type( C, let(X, E0, E1), T)         :- type(C,E0,A),type(cons(pair(X,A),C),E1,T).

first(pair(K,V),cons(pair(K ,V ),Xs)). 
first(pair(K,V),cons(pair(K1,V1),Xs)) :- first(pair(K,V), Xs).

